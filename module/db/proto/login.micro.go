// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: login.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LoginDBGRPCService service

type LoginDBGRPCService interface {
	//微信登陆
	WechatLogin(ctx context.Context, in *LoginDB_C_Wechat, opts ...client.CallOption) (*LoginDB_S_Resp, error)
	//手机登陆
	MobileLogin(ctx context.Context, in *LoginDB_C_Mobile, opts ...client.CallOption) (*LoginDB_S_Resp, error)
	//游客登陆
	VisitorLogin(ctx context.Context, in *LoginDB_C_Visitor, opts ...client.CallOption) (*LoginDB_S_Resp, error)
}

type loginDBGRPCService struct {
	c    client.Client
	name string
}

func NewLoginDBGRPCService(name string, c client.Client) LoginDBGRPCService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &loginDBGRPCService{
		c:    c,
		name: name,
	}
}

func (c *loginDBGRPCService) WechatLogin(ctx context.Context, in *LoginDB_C_Wechat, opts ...client.CallOption) (*LoginDB_S_Resp, error) {
	req := c.c.NewRequest(c.name, "LoginDBGRPCService.WechatLogin", in)
	out := new(LoginDB_S_Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDBGRPCService) MobileLogin(ctx context.Context, in *LoginDB_C_Mobile, opts ...client.CallOption) (*LoginDB_S_Resp, error) {
	req := c.c.NewRequest(c.name, "LoginDBGRPCService.MobileLogin", in)
	out := new(LoginDB_S_Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDBGRPCService) VisitorLogin(ctx context.Context, in *LoginDB_C_Visitor, opts ...client.CallOption) (*LoginDB_S_Resp, error) {
	req := c.c.NewRequest(c.name, "LoginDBGRPCService.VisitorLogin", in)
	out := new(LoginDB_S_Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginDBGRPCService service

type LoginDBGRPCServiceHandler interface {
	//微信登陆
	WechatLogin(context.Context, *LoginDB_C_Wechat, *LoginDB_S_Resp) error
	//手机登陆
	MobileLogin(context.Context, *LoginDB_C_Mobile, *LoginDB_S_Resp) error
	//游客登陆
	VisitorLogin(context.Context, *LoginDB_C_Visitor, *LoginDB_S_Resp) error
}

func RegisterLoginDBGRPCServiceHandler(s server.Server, hdlr LoginDBGRPCServiceHandler, opts ...server.HandlerOption) error {
	type loginDBGRPCService interface {
		WechatLogin(ctx context.Context, in *LoginDB_C_Wechat, out *LoginDB_S_Resp) error
		MobileLogin(ctx context.Context, in *LoginDB_C_Mobile, out *LoginDB_S_Resp) error
		VisitorLogin(ctx context.Context, in *LoginDB_C_Visitor, out *LoginDB_S_Resp) error
	}
	type LoginDBGRPCService struct {
		loginDBGRPCService
	}
	h := &loginDBGRPCServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LoginDBGRPCService{h}, opts...))
}

type loginDBGRPCServiceHandler struct {
	LoginDBGRPCServiceHandler
}

func (h *loginDBGRPCServiceHandler) WechatLogin(ctx context.Context, in *LoginDB_C_Wechat, out *LoginDB_S_Resp) error {
	return h.LoginDBGRPCServiceHandler.WechatLogin(ctx, in, out)
}

func (h *loginDBGRPCServiceHandler) MobileLogin(ctx context.Context, in *LoginDB_C_Mobile, out *LoginDB_S_Resp) error {
	return h.LoginDBGRPCServiceHandler.MobileLogin(ctx, in, out)
}

func (h *loginDBGRPCServiceHandler) VisitorLogin(ctx context.Context, in *LoginDB_C_Visitor, out *LoginDB_S_Resp) error {
	return h.LoginDBGRPCServiceHandler.VisitorLogin(ctx, in, out)
}
